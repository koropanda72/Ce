// ==UserScript==
// @name         Market Data
// @namespace    http://tampermonkey.net/
// @version      1.00
// @description  Scrape item data from the market, store historical prices, and display stats below each item's price.
// @author       DucksyðŸ¦†
// @match        https://cartelempire.online/Market*
// @grant        none
// ==/UserScript==
(function() { 'use strict'; const STORAGE_PREFIX = 'marketData_', SCRAPE_INTERVAL = 3000; function formatNumber(num) { if (num >= 1e9) return (num / 1e9).toFixed(3) + 'b'; if (num >= 1e6) return (num / 1e6).toFixed(3) + 'm'; if (num >= 1e3) return (num / 1e3).toFixed(3) + 'k'; return num % 1 === 0 ? num.toFixed(0) : num.toFixed(3); } function calculateStats(prices) { if (prices.length === 0) return { avg: 'N/A', high: 'N/A', low: 'N/A' }; const total = prices.reduce((sum, price) => sum + price, 0), avg = (total / prices.length).toFixed(3), high = Math.max(...prices), low = Math.min(...prices); console.log(`Calculating stats: Avg = ${avg}, High = ${high}, Low = ${low}`); return { avg, high, low }; } function scrapeMarketData() { const itemCards = document.querySelectorAll('div.card'); if (itemCards.length === 0) { console.error("No item cards found."); return; } itemCards.forEach(card => { const name = card.querySelector('h5')?.innerText || 'N/A', priceElement = Array.from(card.querySelectorAll('p')).find(p => /Â£[\d,]+(\.\d+)?/.test(p.innerText))?.innerText || 'N/A', stockElement = Array.from(card.querySelectorAll('p')).find(p => /x\s*\d[\d,]*/i.test(p.innerText))?.innerText || 'N/A', priceMatch = priceElement.match(/(Â£[\d,]+(\.\d+)?)/), stockMatch = stockElement.match(/x\s*([\d,]+)/i), price = priceMatch ? parseFloat(priceMatch[1].replace(/Â£|,/g, '')) : null, stock = stockMatch ? stockMatch[1].replace(/,/g, '') : 'N/A', itemData = JSON.parse(localStorage.getItem(STORAGE_PREFIX + name)) || { prices: [] }; if (price !== null) { itemData.prices = itemData.prices.filter(p => (Date.now() - p.timestamp) < 8 * 60 * 60 * 1000); const isDuplicate = itemData.prices.some(p => p.value === price); if (!isDuplicate) itemData.prices.push({ value: price, timestamp: Date.now() }); } localStorage.setItem(STORAGE_PREFIX + name, JSON.stringify(itemData)); const stats = calculateStats(itemData.prices.map(p => p.value)); if (name !== 'N/A' && price !== null && stock !== 'N/A') { const existingStatsDiv = card.querySelector('.stats'); if (!existingStatsDiv) { const statsDiv = document.createElement('div'); statsDiv.className = 'stats'; statsDiv.style.marginTop = '5px'; statsDiv.style.fontSize = 'x-small'; statsDiv.style.color = 'green'; statsDiv.innerHTML = `<div><strong>Avg:</strong> Â£${formatNumber(stats.avg)}</div><div><strong>H:</strong> Â£${formatNumber(stats.high)}</div><div><strong>L:</strong> Â£${formatNumber(stats.low)}</div>`; card.querySelector('p').insertAdjacentElement('afterend', statsDiv); } } }); } function clearMarketData() { const keysToRemove = Object.keys(localStorage).filter(key => key.startsWith(STORAGE_PREFIX)); keysToRemove.forEach(key => localStorage.removeItem(key)); alert("Market data cleared!"); scrapeMarketData(); } function createClearDataLink() { const marketElement = document.querySelector('div.card:nth-child(6) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > h2:nth-child(1)'); if (marketElement) { const clearLink = document.createElement('a'); clearLink.innerText = 'Clear Market Data'; clearLink.style.marginLeft = '10px'; clearLink.style.cursor = 'pointer'; clearLink.style.color = 'red'; clearLink.onclick = clearMarketData; marketElement.appendChild(clearLink); } } function startScrapeInterval() { scrapeMarketData(); setInterval(scrapeMarketData, SCRAPE_INTERVAL); } createClearDataLink(); startScrapeInterval(); })();
